변수: 데이터를 메모리에 저장하는 장소
int, float, String, bool

int level = 5; (정수형 데이터)
float strength = 15.5f; (숫자형 데이터)
string Job = "용사"; (문자열 데이터)
bool isFullLevel = false; (논리형 데이터)

Debug.Log("직업은?");
Debug.Log(Job);

선언 > 초기화 > 호출(사용)

주석: 실행되지 않는 메모와 같은 역활
// Test

그룹형 변수: 변수들을 묶은 하나의 장소
string[] monsters = { "슬라임", "사막뱀", "악마" };
Debug.Log("맵애 존재하는 몬스터");
Debug.Log(monsters[0]);
Debug.Log(monsters[1]);
Debug.Log(monsters[2]);

int[] monsterLevel = new int[3];
배열의 크기 [3] 0~2

monsterLevel[0] = 1;
monsterLevel[1] = 6;
monsterLevel[2] = 10;

Debug.Log("레벨 확인");
Debug.Log(monsterLevel[0]);

리스트: 기능이 추가된 가변형 그룹형 변수
List<string> items = new List<string>();
<>: 안에 자료형(제너릭)
items.add("생명물약30");
items.add("생명물약20");

items.RemoveAt(0);
크기를 벗어난 탐색은 오류를 발생

Debug.Log(items[0]);

연산자: 상수, 변수값을 연산해주는 기호
int exp = 1500;
exp = 1500 + 320;
exp = exp - 10;
level = exp / 300;
strength = level * 3.1f;

%: 몫이 아닌 나머지를 출력
int nextExp = 300 - (exp % 300);
Debug.Log("다음 레벨까지 남은 경험치");
Debug.Log(nextExp);

string title = "강력한";
Debug.Log(title + " " + Job);

int fullLevel = 99;
isFullLevel = level == fullLevel;
Debug.Log("만렙 확인: " + isFullLevel);

bool isEndTutorial = level > 10;
Debug.Log("튜토리얼이 끝난 플레이어? " + isEndTutorial);

프로그래밍 부등호:
>(초과), <(미만), >=(이상), <=(이하)

int health = 30;
int mana = 25;
bool isBadCondition = health <= 50 && mana <= 20;
&&(AND): 두 값이 모두 true일 때만 true 출력
bool isBadCondition = health <= 50 || mana <= 20;
||(OR): 두 값 중에서 하나만 true이면 true출력
Debug.Log("플레이어의 상태가 나쁜지? " + isBadCondition);

삼항 연산자
?A:B: true일때 A, false일때 B출력
string condition = isBadCondition ? "나쁨" : "좋음";
Debug.Log("플레이어 상태가 나쁜지? " + condition);

키워드: 프로그래밍 언어를 구성하는 특별한 단어
int, float, string, bool, List

조건문: 조건에 만족하면 로직을 실행하는 제어문
else: 앞의 if가 실행되지 않으면 실행
if(condition == "나쁨"){
	Debug.Log("플레이어 상태가 나쁘니 아이템을 사용 하세요.");
}
else {
	Debug.Log("플레이어 상태가 좋습니다.");
}

if(isBadCondition && items[0] == "생명물약30"){
	items.RemoveAt(0);
	health += 30;
	Debug.Log("생명포션30을 사용하였습니다.");
}
else if(isBadCondition && items[0] == "마나물약30"){
	items.RemoveAt(0);
	mana += 30;
	Debug.Log("마나포션30을 사용하였습니다.");
}

switch, case: 변수의 값에 따라 로직 실행
default: 모든 case를 통과한 후 실행
switch(변수){
	case 값:
		break;
	}
}

switch(monsters[0]){
	case "사막뱀":
	case "슬라임":
		Debug.Log("소형 몬스터과 출현!");
		break;
	case "악마":
		Debug.Log("중형 몬스터가 출현!");
		break;
	case "골렘":
		Debug.Log("대형 몬스터가 출현!");
		break;
	default:
		Debug.Log("??? 몬스터가 출현!");
		break;
	}
}
	
반복문: 조건에 만족하면 로직을 반복하는 제어문
while: 조건이 true일 때, 로직 반복 실행

while(health > 0){
	health--;
	Debug.Log("독 데미지를 입었습니다. " + health);
  else:
    Debug.Log("사망 하였습니다.");
  if(health == 10){
	Debug.Log("해독제를 사용했습니다.");
	break;
}

for: 변수를 연산하면서 로직 반복 실행
for(연산될 변수; 조건; 연산){
	로직
}

for(int count=0; count<10; count++){
	health++;
	Debug.Log("붕대료 치료 중...." + health);
}

for(int index=0; index<monsters.Length; index++){
	Debug.Log("이 지역에 있는 몬스터: " + monsters[index]);
}

for(string monster in monsters){
	Debug.Log("이 지역에 있는 몬스터: " + monster);
}

함수(메소드): 기능을 편리하게 사용하도록 구성된 영역
return: 함수가 값을 반환할때 사용

int Heal(int currentHealth)
{
	currentHealth += 10;
	Debug.Log("힐을 받았습니다. " + currentHealth);
	return health;
{

health = Heal(health);

void: 반환 데이터가 없는 함수 타입
지역변수: 함수 안에서 선언된 변수
전역변수(멤버변수): 함수 바깥에 선언된 변수

void Heal()
{
	health += 10;
	Debug.Log("힐을 받았습니다. " + h ealth);
{

string Battle(int monsterLevel)
{
	string result;
	if(level >= monsterLevel)
		result = "이겼습니다.";
	else
		result = "졌습니다.";
	return result;
}

for(int index=0; index<monster.Length; index++){
	Debug.Log("플레이어는 " + monsters[index] + "에게 " + Battle(monsterLevel[index]));
}

클래스: 하나의 사물(오브젝트)와 대응하는 로직
class: 클래스 선언에 사용
인스턴스: 정의된 클래스를 변수 초기화로 실체화

접근 제어자의 종류
public: 모든 접근을 허용 (외부 클래스에 공개로 설정하는 접근 제어자)
protected: 같은 패키지(폴더)에 있는 객체와 상속관계의 객체들만 허용 
default: 같은 패키지(폴더)에 있는 객체들만 허용 
private: 현재 객체 내에서만 허용 (외부 클래스에 비공개로 설정하는 접근 제어자)

Actor(Class)

public class Actor {

    public int id;
    public string name;
    public string weapon;
    public float strength;
    public int level;

    public string Talk()
    {
        return "대화를 걸었습니다.";
    }

    public string HasWepaon()
    {
        return weapon;
    }

    public void LevelUp()
    {
        level = level + 1;
    }
}

public class NewScript : MonoBehaviour
{
    void Start()
    {
        // 클래스 사용
        // 타입 대신에 클래스 이름
        // 이 클래스를 하나의 변수로 만들어주게 됨 (인스턴스화)
        Actor player = new Actor();
        player.id = 0;
        player.name = "검사";
        player.strength = 2.5f;
        player.weapon = "낡은 검";
        Debug.Log(player.Talk());
        Debug.Log(player.HasWepaon());

        player.LevelUp();
        Debug.Log(player.name + "의 레벨은 " + player.level + " 입니다.");
    }
}

MonoBehaviour: 유니티 게임 오브젝트 클래스

상속 관계
배우 (용사, 슬라임, 악마)
배우라는 이 클래스를 가지고 또 다른 클래스가 만들수가 있다.
배우 클래스 안에 있는 멤버변수, 멤버함수를 플레이어 클래스가 그대로 물려받아서 사용할 수 있다.
자식 클래스는 부모 클래스에 멤버변수와 함수를 사용할 수 있으면서, 자기 자신의 새로운 멤버변수, 멤버함수를 추가로 사용할 수 있다.
플레이어 클래스는 자식 클래스가 되는 것
배우 클래스는 부모 클래스가 되는 것

public class Player : Actor
{
    public string move()
    {
        return "플레이어가 움직입니다.";
    }
}




