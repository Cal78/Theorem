1. 포인터 사용하기

변수는 어디에 생기는 것일까?
int num1 = 10;

메모리와 변수
변수는 컴퓨터의 메모리에 생성됩니다.

보통 변수는 num1과 같이 이름으로 사용
변수는 메모리의 특정 장소에 위치하고 있으므로 메모리 주소로도 표현할 수 있습니다.

int main()
{
	int num = 10;
	printf("%p\n", num); // 0008AF7FC: num의 메모리 주소를 출력
	return 0;			 // 컴퓨터마다, 실행할 때마다 달라진다.
}

변수의 메모리주소: &변수

008AF7FC (메모리 주소. 컴퓨터마다, 실행할 때마다 달라짐)
메모리 주소는 16진수 형태이며 printf에서 서식 지정자 %p를 사용하여 출력합니다.
(pointer의 약어로 p를 사용) 물론 16진수로 출력하는 %x, %X를 사용해도 됩니다.
이때 메모리 주소는 고정된 것이 아니라 컴퓨터마다, 실행할 때마다 달라진다.

32비트: 16진수 8자리 (8바이트)
0x00000000 ~ 0xFFFFFFFF 

64비트: 16진수 16자리 (16바이트)
0x0000000000000000 ~ 0xFFFFFFFFFFFFFFFF

2. 포인터 변수 선언하기

메모리 주소는 포인터 변수에 저장합니다.
자료형 *포인터이름;
*: 애스터리스크
이렇게 포인터 변수는 애스터 리스크를 사용해서 선언합니다.

포인터에는 변수의 주소를 구해서 할당할 수 있습니다.
포인터 변수는 포인터로 줄여서 부르기도 합니다.

변수가 int형이면 변수의 메모리 주소를 저장하는 포인터는 int *형
int *는 영어로 pointer to int라고 읽습니다.

int를 가리키는 포인터라는 뜻
간단하게 int 포인터 

자료형 *포인터이름;
포인터 = &변수;

#include <stdio.h>

int main()
{
	int *numPtr; // 포인터 변수 선언
	int num = 10; // int형 변수를 선언하고 10 저장
	
	numPtr = &num; // num의 메모리 주소를 포인터 변수에 저장
	
	printf("%p\n", numPtr); // 0055FC24: 포인터 변수 numPtr의 값 출력
							// 컴퓨터마다, 실행할 때마다 달라집니다.
							
	printf("%p\n", &num); // 0055FC24: 변수 num의 메모리 주소 출력
						  // 컴퓨터마다, 실행할 때마다 달라집니다.
						  
	return 0;
}

포인터 변수를 선언할 때는 자료형 뒤에 *(Asterisk, 애스터리스크)를 붙입니다.
*의 위치에 따른 차이는 없으며 모두 같은 뜻 입니다.

int* numPtr; // 자료형 쪽에 *을 붙임
int * numPtr; // 자료형 변수 가운데 *를 넣음
int *numPtr; // 변수 쪽에 *을 붙임

포인터 변수를 서넌 했으면 다음과 같이 &(엔드)로 변수의 주소를 구해서 포인터 변수에 저장합니다.
numPtr = &num; // num의 메모리 주소를 포인터 변수에 저장

포인터는 메모리의 특정 위치를 가리킬 때 사용합니다.

int *numPtr; // 포인터 변수 선언
int num = 10;
numPtr = &num; // num의 메모리 주소를 포인터 변수에 저장

numPtr은 10이 저장된 메모리 공간을 가리킵니다.
즉, 변수 num이 있는 공간을 가리키게 되는 것 입니다.

sizeof(포인터)
sizeof(자료형*)

sizeof로 포인터의 크기를 구할 수 있습니다.
32 비트에서는 4 바이트, 64비트에서는 8바이트가 나옵니다.

32비트: %u
64비트: %lu

3. 역참조 연산자 사용하기

포인터 변수에는 메모리 주소가 저장되어 있습니다.
이때 메모리 주소가 있는 곳으로 이동해서 값을 가져오고 싶다면 역참조(dereference) 연산자 *를 사용합니다.

*포인터: 역참조 연산자

변수, 주소 연산자, 역참조 연산자, 포인터의 차이

변수:
변수는 메모리 주소를 몰라도 값을 가져오거나 저장할 수 있다.

주소 연산자:
주소 연산자(&)는 변수의 메모리 주소를 구한다.

역참조 연산자:
역참조 연산자(*)는 메모리에 저장된 값에 접근할 수 있다.
즉, 메모리 주소에 접근하여 값을 가져오고 저장한다.

포인터:
포인터는 변수의 메모리 주소만 가리킨다.

ex) 역참조 코드

#include <stdio.h>

int main()
{
    int *numPtr;      // 포인터 변수 선언
    int num = 10;    // 정수형 변수를 선언하고 10 저장

    numPtr = &num;   // num1의 메모리 주소를 포인터 변수에 저장

    printf("%d\n", *numPtr);    // 10: 역참조 연산자로 num1의 메모리 주소에 접근하여 값을 가져옴

    return 0;
}

- 선 -
#include <stdio.h>

int main()
{
    int *numPtr;      // 포인터 변수 선언
    int num = 10;    // 정수형 변수를 선언하고 10 저장

    numPtr = &num;   // num1의 메모리 주소를 포인터 변수에 저장

    *numPtr = 20;     // 역참조 연산자로 메모리 주소에 접근하여 20을 저장

    printf("%d\n", *numPtr);    // 20: 역참조 연산자로 메모리 주소에 접근하여 값을 가져옴
    printf("%d\n", num);       // 20: 실제 num1의 값도 바뀜

    return 0;
}

